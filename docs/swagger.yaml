components:
    examples: {}
    headers: {}
    parameters: {}
    requestBodies: {}
    responses: {}
    schemas:
        User:
            properties:
                name:
                    type: string
                    description: 'Display name'
                id:
                    type: string
                    description: 'Id should be unique within the server'
            required:
                - name
                - id
            type: object
            additionalProperties: false
        Build:
            properties:
                id:
                    type: string
                    description: 'Id should be unique within the parent build definition.'
                name:
                    type: string
                status:
                    type: string
                    enum:
                        - Queued
                        - Running
                        - Succeeded
                        - PartiallySucceeded
                        - Failed
                        - Canceled
                    description: 'Build status'
                startTime:
                    type: string
                    format: date-time
                    description: 'Date and time when this build was started.'
                finishTime:
                    type: string
                    format: date-time
                    description: 'Should be present for completed builds, but can be absent for running builds.'
                triggeredByUser:
                    $ref: '#/components/schemas/User'
                    description: 'User that requested the build. If the build started automatically after new commit, this should be the user that committed the code.'
                contributors:
                    items:
                        $ref: '#/components/schemas/User'
                    type: array
                    description: 'When the build contains changes from multiple user, additional contributors can be placed here.'
                webUrl:
                    type: string
                    description: 'Web page with build details'
            required:
                - id
                - status
                - startTime
            type: object
            additionalProperties: false
        BuildBranch:
            properties:
                id:
                    type: string
                    description: "Id should be unique within the parent build definition.\n\nBranch id can be taken from source control. Examples:\n- refs/heads/features/test-feature-branch\n- refs/heads/master\n- refs/pull/2/merge\n- refs/remotes/origin/features/test-feature-branch\n\nCatLight will cleanup branch id and use it as a display name for the branch. For example, \"refs/heads/master\" will be transformed into \"master\".\n\nNote: if you don't see the branch in CatLight app UI, make sure that it has recent builds."
                builds:
                    items:
                        $ref: '#/components/schemas/Build'
                    type: array
                    description: 'Sorted array of builds. Last build in the array should be the newest. Return 5-10 builds for each branch.'
                webUrl:
                    type: string
            required:
                - id
                - builds
            type: object
            additionalProperties: false
        BuildDefinition:
            properties:
                id:
                    type: string
                    description: 'Id should be unique in parent space.'
                name:
                    type: string
                    description: 'Display name'
                branches:
                    items:
                        $ref: '#/components/schemas/BuildBranch'
                    type: array
                    description: "Branches array should include:\n\nPrimary branches (master, develop, etc.)\nActive feature branches that had builds in the past 30 days.\n\nIf your system cannot separate builds into branches, add a single branch to this array with id = \"~all\""
                webUrl:
                    type: string
                    description: 'Webpage that provides user with detailed information about this build definition.'
                folder:
                    type: string
                    description: 'Path to the build definition, e.g. "my folder/sub-folder".'
            required:
                - id
                - name
                - branches
            type: object
            additionalProperties: false
        Space:
            description: "Space is a logical container of build definitions. For most servers, space will map to a project or source control repository.\n\nCatLight apps exchange information about build investigations on space level. If your server has thousands of build definitions, put them into separate spaces to avoid performance problems."
            properties:
                id:
                    type: string
                    description: 'Space id should be unique on the server.'
                name:
                    type: string
                    description: 'Display name'
                buildDefinitions:
                    items:
                        $ref: '#/components/schemas/BuildDefinition'
                    type: array
                webUrl:
                    type: string
                    description: 'Url of the space page.'
            required:
                - id
                - name
                - buildDefinitions
            type: object
            additionalProperties: false
        Server:
            properties:
                protocol:
                    type: string
                    enum:
                        - 'https://catlight.io/protocol/v1.0/basic'
                    nullable: false
                    description: 'Constant string that defines the version and mode of CatLight protocol.'
                id:
                    type: string
                    description: "Globally unique server id.\n\nServer id must be globally unique and should not change.\n\n# How to choose server id?\nFor online services, you can use your domain name, e.g. \"myserver.com\"\nFor installed servers, use your domain or product name + unique installation id. For example, \"myserver.com/3A5126E7-EE74-48E4-9997-1C1DE52BA711\". If your server does not have unique id, you can generate a GUID during installation and save it to configuration file.\n\nTry to keep the id shorter than 100 symbols. If your server has a built-in unique id that is very long, you can use a hash sum of it that should be shorter."
                name:
                    type: string
                    description: 'Display name of the server that is shown to the user.'
                spaces:
                    items:
                        $ref: '#/components/schemas/Space'
                    type: array
                webUrl:
                    type: string
                    description: 'Url of the main server page.'
                serverVersion:
                    type: string
                currentUser:
                    $ref: '#/components/schemas/User'
                    description: 'Currently logged-in user. If it is absent, build investigation feature will not be available.'
            required:
                - protocol
                - id
                - name
                - spaces
            type: object
            additionalProperties: false
        BasicBuildInfoResponse:
            $ref: '#/components/schemas/Server'
        HealthCheckResponse:
            properties:
                version:
                    type: string
                buildInfo:
                    properties: {}
                    additionalProperties:
                        type: string
                    type: object
            required:
                - version
                - buildInfo
            type: object
            additionalProperties: false
        WhoAmIResponse:
            properties:
                id:
                    type: string
                name:
                    type: string
                scopes:
                    items:
                        type: string
                    type: array
            required:
                - id
                - name
                - scopes
            type: object
            additionalProperties: false
        BuildDefinitionMetadata:
            properties:
                id:
                    type: string
                    description: 'Id should be unique in parent space.'
                name:
                    type: string
                    description: 'Display name'
                webUrl:
                    type: string
                    description: 'Webpage that provides user with detailed information about this build definition.'
                folder:
                    type: string
                    description: 'Path to the build definition, e.g. "my folder/sub-folder".'
            required:
                - id
                - name
            type: object
            additionalProperties: false
        SpaceMetadata:
            description: "Space is a logical container of build definitions. For most servers, space will map to a project or source control repository.\n\nCatLight apps exchange information about build investigations on space level. If your server has thousands of build definitions, put them into separate spaces to avoid performance problems."
            properties:
                id:
                    type: string
                    description: 'Space id should be unique on the server.'
                name:
                    type: string
                    description: 'Display name'
                buildDefinitions:
                    items:
                        $ref: '#/components/schemas/BuildDefinitionMetadata'
                    type: array
                webUrl:
                    type: string
                    description: 'Url of the space page.'
            required:
                - id
                - name
                - buildDefinitions
            type: object
            additionalProperties: false
        ServerMetadata:
            properties:
                protocol:
                    type: string
                    enum:
                        - 'https://catlight.io/protocol/v1.0/dynamic'
                    nullable: false
                    description: 'Constant string that defines the version and mode of CatLight protocol.'
                id:
                    type: string
                    description: "Globally unique server id.\n\nServer id must be globally unique and should not change.\n\n# How to choose server id?\nFor online services, you can use your domain name, e.g. \"myserver.com\"\nFor installed servers, use your domain or product name + unique installation id. For example, \"myserver.com/3A5126E7-EE74-48E4-9997-1C1DE52BA711\". If your server does not have unique id, you can generate a GUID during installation and save it to configuration file.\n\nTry to keep the id shorter than 100 symbols. If your server has a built-in unique id that is very long, you can use a hash sum of it that should be shorter."
                name:
                    type: string
                    description: 'Display name of the server that is shown to the user.'
                spaces:
                    items:
                        $ref: '#/components/schemas/SpaceMetadata'
                    type: array
                webUrl:
                    type: string
                    description: 'Url of the main server page.'
                serverVersion:
                    type: string
                currentUser:
                    $ref: '#/components/schemas/User'
                    description: 'Currently logged-in user. If it is absent, build investigation feature will not be available.'
            required:
                - protocol
                - id
                - name
                - spaces
            type: object
            additionalProperties: false
        DynamicBuildInfoMetadataResponse:
            $ref: '#/components/schemas/ServerMetadata'
        ValidationErrorJson:
            properties:
                msg:
                    type: string
                technicalDetails:
                    properties:
                        errors:
                            items:
                                type: string
                            type: array
                        msg:
                            type: string
                    required:
                        - errors
                        - msg
                    type: object
            required:
                - msg
                - technicalDetails
            type: object
            additionalProperties: false
        BuildDefinitionStateRequest:
            properties:
                id:
                    type: string
                    description: 'Id should be unique in parent space.'
            required:
                - id
            type: object
            additionalProperties: false
        SpaceStateRequest:
            properties:
                id:
                    type: string
                    description: 'Space id should be unique on the server.'
                buildDefinitions:
                    items:
                        $ref: '#/components/schemas/BuildDefinitionStateRequest'
                    type: array
            required:
                - id
                - buildDefinitions
            type: object
            additionalProperties: false
        ServerStateRequest:
            properties:
                id:
                    type: string
                    description: "Globally unique server id.\n\nServer id must be globally unique and should not change.\n\n# How to choose server id?\nFor online services, you can use your domain name, e.g. \"myserver.com\"\nFor installed servers, use your domain or product name + unique installation id. For example, \"myserver.com/3A5126E7-EE74-48E4-9997-1C1DE52BA711\". If your server does not have unique id, you can generate a GUID during installation and save it to configuration file.\n\nTry to keep the id shorter than 100 symbols. If your server has a built-in unique id that is very long, you can use a hash sum of it that should be shorter."
                spaces:
                    items:
                        $ref: '#/components/schemas/SpaceStateRequest'
                    type: array
            required:
                - id
                - spaces
            type: object
            additionalProperties: false
        DynamicFilteredBuildInfoRequest:
            $ref: '#/components/schemas/ServerStateRequest'
    securitySchemes:
        bearerAuth:
            type: http
            description: 'Bearer authentication - give access to the bearer of this token'
            scheme: bearer
            bearerFormat: JWT
info:
    title: gha-build-monitor
    version: 0.0.1
    description: 'Adapter to give access to GitHub Actions status via the CatLight Protocol'
    license:
        name: MIT
    contact:
        name: tsimbalar
openapi: 3.0.0
paths:
    /basic:
        get:
            operationId: GetBasicBuildInfo
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BasicBuildInfoResponse'
            security:
                -
                    bearerAuth:
                        - repo
            parameters: []
    /_/healthcheck:
        get:
            operationId: GetHealthCheck
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HealthCheckResponse'
            description: 'Gets an indication of the current health of the system'
            security: []
            parameters: []
    /_/whoami:
        get:
            operationId: GetMe
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/WhoAmIResponse'
            description: 'Gets an indication of the current health of the system'
            security:
                -
                    bearerAuth: []
            parameters: []
    /dynamic:
        get:
            operationId: GetMetadata
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DynamicBuildInfoMetadataResponse'
            security:
                -
                    bearerAuth:
                        - repo
            parameters: []
        post:
            operationId: GetServerState
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DynamicBuildInfoMetadataResponse'
                '422':
                    description: 'Validation error'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ValidationErrorJson'
            security:
                -
                    bearerAuth:
                        - repo
            parameters: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DynamicFilteredBuildInfoRequest'
    /examples/basic/basic:
        get:
            operationId: GetBasicExample
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BasicBuildInfoResponse'
            security: []
            parameters: []
    /examples/basic/multi-space:
        get:
            operationId: GetBasicMultispaceExample
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BasicBuildInfoResponse'
            security: []
            parameters: []
    /examples/dynamic:
        get:
            operationId: GetServerMetadata
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DynamicBuildInfoMetadataResponse'
            security: []
            parameters: []
        post:
            operationId: GetServerState
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DynamicBuildInfoMetadataResponse'
                '422':
                    description: 'Validation error'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ValidationErrorJson'
            security: []
            parameters: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DynamicFilteredBuildInfoRequest'
servers:
    -
        url: /
